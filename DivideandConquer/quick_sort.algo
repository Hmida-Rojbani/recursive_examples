// A utility function to swap two elements 
PROCEDURE swap(VAR xp,VAR yp : INTEGER)
VAR
    tmp : INTEGER;
BEGIN
    tmp : = xp;
    xp := yp;
    yp := tmp;
END
/* This function takes last element as pivot, places 
the pivot element at its correct position in sorted 
array, and places all smaller (smaller than pivot) 
to left of pivot and all greater elements to right 
of pivot */

FUNCTION partition(arr : ARRAY_OF INTEGER, low, high : INTEGER) : INTEGER
VAR
    i,j, pivot : INTEGER;
BEGIN
    pivot := arr[high]; // pivot
    i := low -1; // Index of smaller element

    FOR j FROM low TO high-1  DO
    // If current element is smaller than the pivot
        IF (arr[j] < pivot) THEN
            i := i+1;    // increment index of smaller element 
            swap(arr[i],arr[j]);
        END_IF
    END_FOR
    swap(arr[i+1],arr[high]);
    RETURN i+1 ;
END

PROCEDURE quick_sort(VAR arr : ARRAY_OF INTEGER, low, high : INTEGER)
VAR
    pivot : INTEGER;
BEGIN
    IF (low < high) THEN
        /* pivot is partitioning index, arr[pivot] is now 
           at right place */
        pivot := partition(arr, low, high);
        // Separately sort elements before 
        // partition and after partition 
        quick_sort(arr,low,pivot -1);
        quick_sort(arr, pivot +1, high);
    END_IF
END